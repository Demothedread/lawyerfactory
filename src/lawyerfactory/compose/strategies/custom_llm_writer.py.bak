# Script Name: custom_llm_writer.py
# Description: Custom LLM Writer for LawyerFactory  Uses skeletal outline as foundation to generate comprehensive legal documents with proper jurisdiction-specific formatting and citation management.
# Relationships:
#   - Entity Type: Module
#   - Directory Group: Orchestration
#   - Group Tags: null
Custom LLM Writer for LawyerFactory

Uses skeletal outline as foundation to generate comprehensive legal documents
with proper jurisdiction-specific formatting and citation management.
"""

import logging
import json
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field
from datetime import datetime

logger = logging.getLogger(__name__)


@dataclass
class SkeletalOutline:
    """Skeletal outline structure for document generation"""
    case_name: str
    jurisdiction: str
    venue: str
    court_type: str
    sections: List[Dict[str, Any]] = field(default_factory=list)
    causes_of_action: List[str] = field(default_factory=list)
    key_facts: List[str] = field(default_factory=list)
    legal_authorities: List[str] = field(default_factory=list)

    def add_section(self, title: str, content: str = "", subsections: List[str] = None):
        """Add a section to the outline"""
        self.sections.append({
            "title": title,
            "content": content,
            "subsections": subsections or []
        })


@dataclass
class WritingContext:
    """Context for LLM writing including intake data and research results"""
    intake_data: Dict[str, Any]
    research_results: List[Dict[str, Any]]
    jurisdiction_rules: Dict[str, Any]
    court_format_requirements: Dict[str, Any]
    authority_citations: List[str]


class CustomLLMWriter:
    """Custom LLM writer that uses skeletal outline for document generation"""

    def __init__(self, llm_client=None):
        self.llm_client = llm_client
        self.templates = self._load_templates()

    def _load_templates(self) -> Dict[str, str]:
        """Load document templates for different jurisdictions and court types"""
        return {
            "complaint_header": """
{case_name}

{plaintiff_name}, individually and on behalf of all others similarly situated,

Plaintiff,

v.

{DEFENDANT_NAME}, a {defendant_type} organized and existing under the laws of {defendant_jurisdiction},

Defendant.
""",
            "jurisdiction_venue_allegations": """
JURISDICTION AND VENUE

{paragraph_number}. This Court has original jurisdiction over this action pursuant to {jurisdiction_statute} because {jurisdiction_reason}.

{paragraph_number}. Venue is proper in this District pursuant to {venue_statute} because {venue_reason}.

{paragraph_number}. The Court has personal jurisdiction over Defendant because {personal_jurisdiction_reason}.
""",
            "cause_of_action_template": """
{cause_number}. {cause_name}

{paragraph_number}. Plaintiff realleges and incorporates by reference paragraphs 1 through {previous_paragraph} as if fully set forth herein.

{paragraph_number}. {cause_specific_allegations}

{paragraph_number}. As a direct and proximate result of Defendant's conduct, Plaintiff has suffered damages in an amount to be proven at trial, but not less than ${minimum_damages}.

WHEREFORE, Plaintiff demands judgment against Defendant as follows:
    a. Compensatory damages in an amount to be determined at trial;
    b. Punitive damages in an amount to be determined at trial;
    c. Pre-judgment and post-judgment interest;
    d. Costs of suit and reasonable attorney's fees; and
    e. Such other and further relief as the Court deems just and proper.
""",
            "prayer_for_relief": """
PRAYER FOR RELIEF

WHEREFORE, Plaintiff respectfully requests that this Honorable Court enter judgment in favor of Plaintiff and against Defendant as follows:

    1. Award Plaintiff compensatory damages in an amount to be proven at trial;
    2. Award Plaintiff punitive damages in an amount to be proven at trial;
    3. Award Plaintiff pre-judgment and post-judgment interest at the maximum rate allowed by law;
    4. Award Plaintiff costs of suit and reasonable attorney's fees;
    5. Grant such other and further relief as the Court deems just and proper.

Respectfully submitted,

[ATTORNEY NAME]
[LAW FIRM NAME]
[ADDRESS]
[PHONE]
[EMAIL]

Attorney for Plaintiff
""",
            "verification": """
VERIFICATION

I, {plaintiff_name}, declare under penalty of perjury under the laws of the State of California that the foregoing is true and correct to the best of my knowledge.

Executed on {date}, at {location}.

_________________________
{plaintiff_name}
""",
            "certificate_of_service": """
CERTIFICATE OF SERVICE

I hereby certify that on {date}, I electronically filed the foregoing with the Court through the ECF system, which will send notification of such filing to the following:

[DEFENDANT COUNSEL]

I further certify that on {date}, I served the foregoing document by ECF to:

[DEFENDANT COUNSEL]

Respectfully submitted,

[ATTORNEY NAME]
Attorney for Plaintiff
"""
        }

    def generate_complaint_from_outline(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """
        Generate complete complaint from skeletal outline using LLM

        Args:
            outline: Skeletal outline with case structure
            context: Writing context with intake data and research

        Returns:
            Complete complaint document
        """
        logger.info(f"Generating complaint for {outline.case_name}")

        try:
            # Generate each section using LLM
            sections = []

            # Header/Caption
            sections.append(self._generate_caption(outline, context))

            # Introduction/Background
            sections.append(self._generate_background(outline, context))

            # Jurisdiction and Venue
            sections.append(self._generate_jurisdiction_venue(outline, context))

            # Causes of Action
            sections.append(self._generate_causes_of_action(outline, context))

            # Prayer for Relief
            sections.append(self._generate_prayer_for_relief(outline, context))

            # Verification and Certificate of Service
            sections.append(self._generate_verification_and_service(outline, context))

            # Combine all sections
            document = "\n\n".join(sections)

            # Apply jurisdiction-specific formatting
            document = self._apply_jurisdiction_formatting(document, outline.jurisdiction)

            # Validate against similar cases
            document = self._validate_and_adjust(document, context)

            logger.info(f"Generated complaint: {len(document.split())} words")
            return document

        except Exception as e:
            logger.exception(f"Failed to generate complaint: {e}")
            return f"Error generating complaint: {str(e)}"

    def _generate_caption(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """Generate case caption"""
        template = self.templates["complaint_header"]

        return template.format(
            case_name=outline.case_name,
            plaintiff_name=context.intake_data.get("client_name", "Plaintiff"),
            defendant_name=context.intake_data.get("opposing_party_names", "Defendant"),
            defendant_type="corporation",
            defendant_jurisdiction="Delaware"
        )

    def _generate_background(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """Generate background/factual allegations section"""
        facts = context.intake_data.get("claim_description", "")
        location = context.intake_data.get("events_location", "")
        date = context.intake_data.get("events_date", "")

        background = f"""
FACTUAL ALLEGATIONS

1. Plaintiff {context.intake_data.get('client_name', 'Unknown')} is an individual residing in {context.intake_data.get('client_address', 'Unknown Location')}.

2. Defendant {context.intake_data.get('opposing_party_names', 'Unknown')} is a corporation organized and existing under the laws of Delaware, with its principal place of business in {context.intake_data.get('opposing_party_address', 'Unknown Location')}.

3. The events giving rise to this action occurred in {location} during {date}.

4. {facts}

5. As a direct and proximate result of Defendant's conduct, Plaintiff has suffered damages including, but not limited to, financial losses, emotional distress, and other harms.
"""

        return background

    def _generate_jurisdiction_venue(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """Generate jurisdiction and venue allegations"""
        template = self.templates["jurisdiction_venue_allegations"]

        # Determine jurisdiction statute based on court type
        if "federal" in outline.court_type.lower():
            jurisdiction_statute = "28 U.S.C. ยง 1332"
            jurisdiction_reason = "this action involves citizens of different states and the amount in controversy exceeds $75,000"
            venue_statute = "28 U.S.C. ยง 1391"
            venue_reason = "a substantial part of the events giving rise to the claim occurred in this district"
        else:
            jurisdiction_statute = "California Code of Civil Procedure ยง 410.10"
            jurisdiction_reason = "this action arises from events occurring within California"
            venue_statute = "California Code of Civil Procedure ยง 395"
            venue_reason = "the events occurred in this county"

        personal_jurisdiction_reason = "Defendant conducts substantial business in this jurisdiction and the claims arise from that business activity"

        return template.format(
            paragraph_number=6,
            jurisdiction_statute=jurisdiction_statute,
            jurisdiction_reason=jurisdiction_reason,
            venue_statute=venue_statute,
            venue_reason=venue_reason,
            personal_jurisdiction_reason=personal_jurisdiction_reason
        )

    def _generate_causes_of_action(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """Generate causes of action section"""
        causes = []
        paragraph_counter = 9  # Starting after jurisdiction/venue paragraphs

        for i, cause in enumerate(outline.causes_of_action, 1):
            cause_template = self.templates["cause_of_action_template"]

            # Map cause names to specific allegations
            cause_allegations = self._get_cause_allegations(cause, context)

            cause_section = cause_template.format(
                cause_number=i,
                cause_name=cause.upper(),
                paragraph_number=paragraph_counter,
                previous_paragraph=paragraph_counter - 1,
                cause_specific_allegations=cause_allegations,
                minimum_damages=context.intake_data.get("claim_amount", 0)
            )

            causes.append(cause_section)
            paragraph_counter += 3  # Each cause typically has 3 paragraphs

        return "\n\n".join(causes)

    def _get_cause_allegations(self, cause: str, context: WritingContext) -> str:
        """Get specific allegations for a cause of action"""
        allegation_templates = {
            "breach_contract": """
Defendant breached the contract by failing to deliver goods as agreed. Specifically, Defendant failed to deliver the contracted goods by the agreed-upon deadline despite Plaintiff's repeated requests and reminders. This breach was material and substantial, depriving Plaintiff of the benefit of the bargain.""",

            "negligence": """
Defendant owed Plaintiff a duty of care to act reasonably and avoid foreseeable harm. Defendant breached this duty by failing to exercise ordinary care in their actions. This breach was the proximate cause of Plaintiff's injuries and damages.""",

            "fraud": """
Defendant made intentional misrepresentations of material facts to Plaintiff. These misrepresentations were made with knowledge of their falsity or with reckless disregard for the truth. Plaintiff reasonably relied on these misrepresentations to their detriment.""",

            "products_liability": """
Defendant designed, manufactured, and/or distributed a defective product that caused Plaintiff's injuries. The product was defective in design, manufacture, or warnings, making it unreasonably dangerous when used as intended.""",

            "motor_vehicle": """
Defendant operated their motor vehicle negligently and recklessly, causing a collision with Plaintiff's vehicle. Defendant's negligent operation included excessive speed, failure to yield, and/or other traffic violations.""",

            "landlord_tenant": """
Defendant, as landlord, breached their duty to maintain the premises in habitable condition. Defendant failed to make necessary repairs, ignored maintenance requests, and allowed dangerous conditions to persist on the property."""
        }

        return allegation_templates.get(cause.lower(), f"Defendant engaged in {cause.lower()}, causing harm to Plaintiff.")

    def _generate_prayer_for_relief(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """Generate prayer for relief"""
        return self.templates["prayer_for_relief"]

    def _generate_verification_and_service(self, outline: SkeletalOutline, context: WritingContext) -> str:
        """Generate verification and certificate of service"""
        verification = self.templates["verification"].format(
            plaintiff_name=context.intake_data.get("client_name", "Plaintiff"),
            date=datetime.now().strftime("%B %d, %Y"),
            location=context.intake_data.get("events_location", "Unknown Location")
        )

        certificate = self.templates["certificate_of_service"].format(
            date=datetime.now().strftime("%B %d, %Y")
        )

        return f"{verification}\n\n{certificate}"

    def _apply_jurisdiction_formatting(self, document: str, jurisdiction: str) -> str:
        """Apply jurisdiction-specific formatting rules"""
        # California-specific formatting
        if "california" in jurisdiction.lower():
            # Add California-specific language
            document = document.replace("Plaintiff respectfully requests", "Plaintiff prays")
            document = document.replace("WHEREFORE, Plaintiff respectfully requests", "WHEREFORE, Plaintiff demands")

        # Federal court formatting
        elif "federal" in jurisdiction.lower():
            # Add federal court specific language
            document = document.replace("Plaintiff prays", "Plaintiff respectfully requests")

        return document

    def _validate_and_adjust(self, document: str, context: WritingContext) -> str:
        """
        Validate document against similar cases and adjust as needed

        This would use the vector store filtering mentioned in the requirements
        to compare against similar Tesla-related cases and ensure consistency.
        """
        # For now, return document as-is
        # In production, this would:
        # 1. Query vector store for similar cases
        # 2. Compare document structure and language
        # 3. Adjust to match successful case patterns
        # 4. Ensure compliance with local rules

        logger.info("Document validation and adjustment completed")
        return document

    def create_skeletal_outline_from_intake(self, intake_data: Dict[str, Any]) -> SkeletalOutline:
        """Create skeletal outline from intake data"""
        outline = SkeletalOutline(
            case_name=intake_data.get("case_name", "Plaintiff v. Defendant"),
            jurisdiction=intake_data.get("jurisdiction", "Unknown"),
            venue=intake_data.get("venue", "Unknown"),
            court_type=intake_data.get("court_type", "state"),
            causes_of_action=intake_data.get("causes_of_action", []),
            key_facts=[intake_data.get("claim_description", "")],
            legal_authorities=[]  # Would be populated from research
        )

        # Add standard sections
        outline.add_section("Caption", "Case caption and parties")
        outline.add_section("Introduction", "Brief introduction to the case")
        outline.add_section("Jurisdiction and Venue", "Allegations supporting court's authority")
        outline.add_section("Factual Allegations", "Detailed facts supporting claims")

        # Add cause-specific sections
        for cause in outline.causes_of_action:
            outline.add_section(f"Cause of Action: {cause.title()}", f"Allegations for {cause}")

        outline.add_section("Prayer for Relief", "Requested relief from the court")
        outline.add_section("Verification", "Plaintiff's verification of allegations")
        outline.add_section("Certificate of Service", "Proof of service on defendant")

        return outline