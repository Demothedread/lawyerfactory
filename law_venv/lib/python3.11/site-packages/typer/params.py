from typing import (TYPE_CHECKING, Any, List, Optional, Type, Union,
                    overload)
from collections.abc import Callable

import click

from .models import ArgumentInfo, OptionInfo

if TYPE_CHECKING:  # pragma: no cover
    import click.shell_completion


# Overload for Option created with custom type 'parser'
@overload
def Option(
    # Parameter
    default: Any | None = ...,
    *param_decls: str,
    callback: Callable[..., Any] | None = None,
    metavar: str | None = None,
    expose_value: bool = True,
    is_eager: bool = False,
    envvar: str | list[str] | None = None,
    # Note that shell_complete is not fully supported and will be removed in future versions
    # TODO: Remove shell_complete in a future version (after 0.16.0)
    shell_complete: None | (
        Callable[
            [click.Context, click.Parameter, str],
            list["click.shell_completion.CompletionItem"] | list[str],
        ]
    ) = None,
    autocompletion: Callable[..., Any] | None = None,
    default_factory: Callable[[], Any] | None = None,
    # Custom type
    parser: Callable[[str], Any] | None = None,
    # Option
    show_default: bool | str = True,
    prompt: bool | str = False,
    confirmation_prompt: bool = False,
    prompt_required: bool = True,
    hide_input: bool = False,
    # TODO: remove is_flag and flag_value in a future release
    is_flag: bool | None = None,
    flag_value: Any | None = None,
    count: bool = False,
    allow_from_autoenv: bool = True,
    help: str | None = None,
    hidden: bool = False,
    show_choices: bool = True,
    show_envvar: bool = True,
    # Choice
    case_sensitive: bool = True,
    # Numbers
    min: int | float | None = None,
    max: int | float | None = None,
    clamp: bool = False,
    # DateTime
    formats: list[str] | None = None,
    # File
    mode: str | None = None,
    encoding: str | None = None,
    errors: str | None = "strict",
    lazy: bool | None = None,
    atomic: bool = False,
    # Path
    exists: bool = False,
    file_okay: bool = True,
    dir_okay: bool = True,
    writable: bool = False,
    readable: bool = True,
    resolve_path: bool = False,
    allow_dash: bool = False,
    path_type: None | type[str] | type[bytes] = None,
    # Rich settings
    rich_help_panel: str | None = None,
) -> Any: ...


# Overload for Option created with custom type 'click_type'
@overload
def Option(
    # Parameter
    default: Any | None = ...,
    *param_decls: str,
    callback: Callable[..., Any] | None = None,
    metavar: str | None = None,
    expose_value: bool = True,
    is_eager: bool = False,
    envvar: str | list[str] | None = None,
    # Note that shell_complete is not fully supported and will be removed in future versions
    # TODO: Remove shell_complete in a future version (after 0.16.0)
    shell_complete: None | (
        Callable[
            [click.Context, click.Parameter, str],
            list["click.shell_completion.CompletionItem"] | list[str],
        ]
    ) = None,
    autocompletion: Callable[..., Any] | None = None,
    default_factory: Callable[[], Any] | None = None,
    # Custom type
    click_type: click.ParamType | None = None,
    # Option
    show_default: bool | str = True,
    prompt: bool | str = False,
    confirmation_prompt: bool = False,
    prompt_required: bool = True,
    hide_input: bool = False,
    # TODO: remove is_flag and flag_value in a future release
    is_flag: bool | None = None,
    flag_value: Any | None = None,
    count: bool = False,
    allow_from_autoenv: bool = True,
    help: str | None = None,
    hidden: bool = False,
    show_choices: bool = True,
    show_envvar: bool = True,
    # Choice
    case_sensitive: bool = True,
    # Numbers
    min: int | float | None = None,
    max: int | float | None = None,
    clamp: bool = False,
    # DateTime
    formats: list[str] | None = None,
    # File
    mode: str | None = None,
    encoding: str | None = None,
    errors: str | None = "strict",
    lazy: bool | None = None,
    atomic: bool = False,
    # Path
    exists: bool = False,
    file_okay: bool = True,
    dir_okay: bool = True,
    writable: bool = False,
    readable: bool = True,
    resolve_path: bool = False,
    allow_dash: bool = False,
    path_type: None | type[str] | type[bytes] = None,
    # Rich settings
    rich_help_panel: str | None = None,
) -> Any: ...


def Option(
    # Parameter
    default: Any | None = ...,
    *param_decls: str,
    callback: Callable[..., Any] | None = None,
    metavar: str | None = None,
    expose_value: bool = True,
    is_eager: bool = False,
    envvar: str | list[str] | None = None,
    # Note that shell_complete is not fully supported and will be removed in future versions
    # TODO: Remove shell_complete in a future version (after 0.16.0)
    shell_complete: None | (
        Callable[
            [click.Context, click.Parameter, str],
            list["click.shell_completion.CompletionItem"] | list[str],
        ]
    ) = None,
    autocompletion: Callable[..., Any] | None = None,
    default_factory: Callable[[], Any] | None = None,
    # Custom type
    parser: Callable[[str], Any] | None = None,
    click_type: click.ParamType | None = None,
    # Option
    show_default: bool | str = True,
    prompt: bool | str = False,
    confirmation_prompt: bool = False,
    prompt_required: bool = True,
    hide_input: bool = False,
    # TODO: remove is_flag and flag_value in a future release
    is_flag: bool | None = None,
    flag_value: Any | None = None,
    count: bool = False,
    allow_from_autoenv: bool = True,
    help: str | None = None,
    hidden: bool = False,
    show_choices: bool = True,
    show_envvar: bool = True,
    # Choice
    case_sensitive: bool = True,
    # Numbers
    min: int | float | None = None,
    max: int | float | None = None,
    clamp: bool = False,
    # DateTime
    formats: list[str] | None = None,
    # File
    mode: str | None = None,
    encoding: str | None = None,
    errors: str | None = "strict",
    lazy: bool | None = None,
    atomic: bool = False,
    # Path
    exists: bool = False,
    file_okay: bool = True,
    dir_okay: bool = True,
    writable: bool = False,
    readable: bool = True,
    resolve_path: bool = False,
    allow_dash: bool = False,
    path_type: None | type[str] | type[bytes] = None,
    # Rich settings
    rich_help_panel: str | None = None,
) -> Any:
    return OptionInfo(
        # Parameter
        default=default,
        param_decls=param_decls,
        callback=callback,
        metavar=metavar,
        expose_value=expose_value,
        is_eager=is_eager,
        envvar=envvar,
        shell_complete=shell_complete,
        autocompletion=autocompletion,
        default_factory=default_factory,
        # Custom type
        parser=parser,
        click_type=click_type,
        # Option
        show_default=show_default,
        prompt=prompt,
        confirmation_prompt=confirmation_prompt,
        prompt_required=prompt_required,
        hide_input=hide_input,
        is_flag=is_flag,
        flag_value=flag_value,
        count=count,
        allow_from_autoenv=allow_from_autoenv,
        help=help,
        hidden=hidden,
        show_choices=show_choices,
        show_envvar=show_envvar,
        # Choice
        case_sensitive=case_sensitive,
        # Numbers
        min=min,
        max=max,
        clamp=clamp,
        # DateTime
        formats=formats,
        # File
        mode=mode,
        encoding=encoding,
        errors=errors,
        lazy=lazy,
        atomic=atomic,
        # Path
        exists=exists,
        file_okay=file_okay,
        dir_okay=dir_okay,
        writable=writable,
        readable=readable,
        resolve_path=resolve_path,
        allow_dash=allow_dash,
        path_type=path_type,
        # Rich settings
        rich_help_panel=rich_help_panel,
    )


# Overload for Argument created with custom type 'parser'
@overload
def Argument(
    # Parameter
    default: Any | None = ...,
    *,
    callback: Callable[..., Any] | None = None,
    metavar: str | None = None,
    expose_value: bool = True,
    is_eager: bool = False,
    envvar: str | list[str] | None = None,
    # Note that shell_complete is not fully supported and will be removed in future versions
    # TODO: Remove shell_complete in a future version (after 0.16.0)
    shell_complete: None | (
        Callable[
            [click.Context, click.Parameter, str],
            list["click.shell_completion.CompletionItem"] | list[str],
        ]
    ) = None,
    autocompletion: Callable[..., Any] | None = None,
    default_factory: Callable[[], Any] | None = None,
    # Custom type
    parser: Callable[[str], Any] | None = None,
    # TyperArgument
    show_default: bool | str = True,
    show_choices: bool = True,
    show_envvar: bool = True,
    help: str | None = None,
    hidden: bool = False,
    # Choice
    case_sensitive: bool = True,
    # Numbers
    min: int | float | None = None,
    max: int | float | None = None,
    clamp: bool = False,
    # DateTime
    formats: list[str] | None = None,
    # File
    mode: str | None = None,
    encoding: str | None = None,
    errors: str | None = "strict",
    lazy: bool | None = None,
    atomic: bool = False,
    # Path
    exists: bool = False,
    file_okay: bool = True,
    dir_okay: bool = True,
    writable: bool = False,
    readable: bool = True,
    resolve_path: bool = False,
    allow_dash: bool = False,
    path_type: None | type[str] | type[bytes] = None,
    # Rich settings
    rich_help_panel: str | None = None,
) -> Any: ...


# Overload for Argument created with custom type 'click_type'
@overload
def Argument(
    # Parameter
    default: Any | None = ...,
    *,
    callback: Callable[..., Any] | None = None,
    metavar: str | None = None,
    expose_value: bool = True,
    is_eager: bool = False,
    envvar: str | list[str] | None = None,
    # Note that shell_complete is not fully supported and will be removed in future versions
    # TODO: Remove shell_complete in a future version (after 0.16.0)
    shell_complete: None | (
        Callable[
            [click.Context, click.Parameter, str],
            list["click.shell_completion.CompletionItem"] | list[str],
        ]
    ) = None,
    autocompletion: Callable[..., Any] | None = None,
    default_factory: Callable[[], Any] | None = None,
    # Custom type
    click_type: click.ParamType | None = None,
    # TyperArgument
    show_default: bool | str = True,
    show_choices: bool = True,
    show_envvar: bool = True,
    help: str | None = None,
    hidden: bool = False,
    # Choice
    case_sensitive: bool = True,
    # Numbers
    min: int | float | None = None,
    max: int | float | None = None,
    clamp: bool = False,
    # DateTime
    formats: list[str] | None = None,
    # File
    mode: str | None = None,
    encoding: str | None = None,
    errors: str | None = "strict",
    lazy: bool | None = None,
    atomic: bool = False,
    # Path
    exists: bool = False,
    file_okay: bool = True,
    dir_okay: bool = True,
    writable: bool = False,
    readable: bool = True,
    resolve_path: bool = False,
    allow_dash: bool = False,
    path_type: None | type[str] | type[bytes] = None,
    # Rich settings
    rich_help_panel: str | None = None,
) -> Any: ...


def Argument(
    # Parameter
    default: Any | None = ...,
    *,
    callback: Callable[..., Any] | None = None,
    metavar: str | None = None,
    expose_value: bool = True,
    is_eager: bool = False,
    envvar: str | list[str] | None = None,
    # Note that shell_complete is not fully supported and will be removed in future versions
    # TODO: Remove shell_complete in a future version (after 0.16.0)
    shell_complete: None | (
        Callable[
            [click.Context, click.Parameter, str],
            list["click.shell_completion.CompletionItem"] | list[str],
        ]
    ) = None,
    autocompletion: Callable[..., Any] | None = None,
    default_factory: Callable[[], Any] | None = None,
    # Custom type
    parser: Callable[[str], Any] | None = None,
    click_type: click.ParamType | None = None,
    # TyperArgument
    show_default: bool | str = True,
    show_choices: bool = True,
    show_envvar: bool = True,
    help: str | None = None,
    hidden: bool = False,
    # Choice
    case_sensitive: bool = True,
    # Numbers
    min: int | float | None = None,
    max: int | float | None = None,
    clamp: bool = False,
    # DateTime
    formats: list[str] | None = None,
    # File
    mode: str | None = None,
    encoding: str | None = None,
    errors: str | None = "strict",
    lazy: bool | None = None,
    atomic: bool = False,
    # Path
    exists: bool = False,
    file_okay: bool = True,
    dir_okay: bool = True,
    writable: bool = False,
    readable: bool = True,
    resolve_path: bool = False,
    allow_dash: bool = False,
    path_type: None | type[str] | type[bytes] = None,
    # Rich settings
    rich_help_panel: str | None = None,
) -> Any:
    return ArgumentInfo(
        # Parameter
        default=default,
        # Arguments can only have one param declaration
        # it will be generated from the param name
        param_decls=None,
        callback=callback,
        metavar=metavar,
        expose_value=expose_value,
        is_eager=is_eager,
        envvar=envvar,
        shell_complete=shell_complete,
        autocompletion=autocompletion,
        default_factory=default_factory,
        # Custom type
        parser=parser,
        click_type=click_type,
        # TyperArgument
        show_default=show_default,
        show_choices=show_choices,
        show_envvar=show_envvar,
        help=help,
        hidden=hidden,
        # Choice
        case_sensitive=case_sensitive,
        # Numbers
        min=min,
        max=max,
        clamp=clamp,
        # DateTime
        formats=formats,
        # File
        mode=mode,
        encoding=encoding,
        errors=errors,
        lazy=lazy,
        atomic=atomic,
        # Path
        exists=exists,
        file_okay=file_okay,
        dir_okay=dir_okay,
        writable=writable,
        readable=readable,
        resolve_path=resolve_path,
        allow_dash=allow_dash,
        path_type=path_type,
        # Rich settings
        rich_help_panel=rich_help_panel,
    )
