{
  "version": "1.0",
  "apply_to": "LLM-assisted coding tasks",
  "rules": [
    {
      "id": "no-mock",
      "short": "No mock/preset outcomes",
      "detail": "Never include mock data or code that assumes predetermined outcomes in development; produce production-ready code only."
    },
    {
      "id": "minimize-guides",
      "short": "One guide per dir",
      "detail": "Limit guides/markdown to at most one per directory/subdirectory; consolidate instructions into the main README.md."
    },
    {
      "id": "pre_review",
      "short": "Review before change",
      "detail": "Before implementing features, open knowledge_graph.json and scan the first ~50-150 lines of relevant files to detect context and overlaps."
    },
    {
      "id": "file_top_summary",
      "short": "File top summary",
      "detail": "Prepend a 2-3 line concise, LLM-legible shorthand at the top of each file describing its purpose; keep entries minimal token length."
    },
    {
      "id": "update_kg",
      "short": "Update knowledge_graph.json",
      "detail": "At the end of major runs or finished tasks, append brief KG entries: new objects/functions/entities, short descriptions, relationships, and observations (1-3 lines each)."
    },
    {
      "id": "concise_shorthand",
      "short": "Concise KG & summaries",
      "detail": "Summaries and KG updates must be concise, logic-friendly, and use as few tokens as possible while preserving meaning."
    },
    {
      "id": "decompose_tasks",
      "short": "Break complex tasks",
      "detail": "Break complex tasks into manageable steps and provide the plan before coding."
    },
    {
      "id": "modularize",
      "short": "Modular code",
      "detail": "Write short single-purpose modules, organized into subdirectories; avoid multiple scripts addressing the same task."
    },
    {
      "id": "update_paths",
      "short": "Maintain pathnames",
      "detail": "Always update and maintain pathnames after reorganization; reflect moves in imports and KG."
    },
    {
      "id": "no_duplicate_enhanced",
      "short": "No duplicate 'enhanced' files",
      "detail": "Do not create files named with adjectives like 'enhanced' or 'comprehensive' to avoid duplication; edit the canonical file directly."
    },
    {
      "id": "group_related",
      "short": "Group related modules",
      "detail": "Group related modules under a shared folder (e.g., researcher/*) to keep a clean structure."
    },
    {
      "id": "tests_location",
      "short": "Tests folder",
      "detail": "Place unit/integration tests under a tests/ folder; remove outdated tests during pruning phases."
    },
    {
      "id": "prune_phase",
      "short": "Prune and consolidate",
      "detail": "At the end of a phase, streamline: remove redundancies, outdated files, and consolidate duplicate functionality."
    },
    {
      "id": "enforce_and_report",
      "short": "Enforce violations",
      "detail": "Flag rule violations and return a concise correction plan; optionally fail automated runs if critical rules broken."
    }
  ],
  "meta": {
    "format": "concise",
    "author": "policy",
    "enforceChanges": true,
    "provider": {
      "name": "roo",
      "version": "1.0",
      "profile": {
        "id": "roo-code-settings",
        "description": "Config for Roo LLM-assisted coding enforcement and defaults",
        "enforce": true,
        "defaults": {
          "max_line_length": 120,
          "allow_json_comments": true,
          "require_file_top_summary": true,
          "minimal_verbose_output": true
        }
      }
    }
  }
}
